import os
import db

import config
import telebot

from telebot import types

bot = telebot.TeleBot(config.TOKEN)


def choose_action(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    check_balance_button = types.KeyboardButton("üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    add_income_button = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥—ã")
    add_expenses_button = types.KeyboardButton("‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã")
    get_history_button = types.KeyboardButton("üíæ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç")

    markup.row(check_balance_button)
    markup.row(add_income_button)
    markup.row(add_expenses_button)
    markup.row(get_history_button)

    bot.send_message(message.chat.id,
                     f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", parse_mode="markdown", reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    database = db.Database()

    if database.is_registered(message.chat.id):
        bot.send_message(message.chat.id,
                         f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{message.from_user.first_name} {message.from_user.last_name}*!", parse_mode="markdown")
        choose_action(message)

    else:
        markup = types.InlineKeyboardMarkup(row_width=1)
        signup_button = types.InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="signup")
        markup.add(signup_button)

        bot.send_message(message.chat.id,
                         "–≠—Ç–æ –±–æ—Ç *MCStudio*\n–° –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\nüí∞ –í–µ—Å—Ç–∏ —É—á—ë—Ç —Å–≤–æ–∏—Ö –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n"
                         "‚úî –ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–ª–∞–Ω—Å\n"
                         "‚ûï –î–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã\n"
                         "‚ûñ –î–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã\n"
                         "üíæ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
                         "üì± –ò –≤—Å–µ —ç—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –≥–¥–µ —É–≥–æ–¥–Ω–æ!", parse_mode="markdown", reply_markup=markup)


@bot.message_handler(content_types=['text'])
def message_handler(message):
    database = db.Database()

    if database.is_registered(message.chat.id):
        if database.get_income_in(message.chat.id):
            try:
                n = float(message.text.replace(",", "."))
                if n:
                    database.add_user_income(message.chat.id, n)

                else:
                    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç –Ω—É–ª—è")

            except ValueError:
                if message.text.lower().strip() == "end":
                    database.set_income_in(message.chat.id, False)
                    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!")

                else:
                    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞")

        elif database.get_expenses_in(message.chat.id):
            try:
                n = float(message.text.replace(",", "."))
                if n:
                    database.add_user_expenses(message.chat.id, n)

                else:
                    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç –Ω—É–ª—è")

            except ValueError:
                if message.text.lower().strip() == "end":
                    database.set_expenses_in(message.chat.id, False)
                    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!")

                else:
                    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞")

        elif message.chat.type == 'private':
            if message.text == 'üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å':
                balance = database.get_user_balance(message.chat.id)
                bot.send_message(message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}")

            elif message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥—ã':
                bot.send_message(message.chat.id, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –∏—Ö"
                                                  " –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ *end*.",

                                 parse_mode="markdown")
                database.set_income_in(message.chat.id, True)

            elif message.text == '‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã':
                bot.send_message(message.chat.id, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –∏—Ö"
                                                  " –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ *end*.",
                                 parse_mode="markdown")
                database.set_expenses_in(message.chat.id, True)

            elif message.text == "üíæ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç":
                filepath = f"histories/{message.chat.id}.txt"

                user_income = database.get_user_income(message.chat.id)
                user_expenses = database.get_user_expenses(message.chat.id)

                data = ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Ö–æ–¥–∞—Ö:"]
                data += [f" +{i}" for i in user_income] if user_income else ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö."]
                data += ["\n", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö:"]
                data += [f" -{i}" for i in user_expenses] if user_expenses else ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö."]

                with open(filepath, "w", encoding="utf8") as history_file:
                    history_file.write("\n".join(data))

                with open(filepath, "rb") as history_file:
                    bot.send_document(message.chat.id, open(filepath, "rb"))

                os.remove(filepath)

            elif not any((database.get_income_in(message.chat.id), database.get_expenses_in(message.chat.id))):
                bot.send_message(message.chat.id, f"–¢–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    else:
        bot.send_message(message.chat.id, f"–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç: /start")

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    database = db.Database()
    try:
        if call.message:
            if call.data == "signup":
                database.create_user(call.message.chat.id)
                bot.send_message(call.message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üëåüèª")

                choose_action(call.message)

    except Exception as e:
        print(repr(e))


bot.polling(none_stop=True)
