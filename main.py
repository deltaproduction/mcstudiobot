import db

import config
import telebot

from telebot import types

user_id, username = int(), str()
income_in, expenses_in = False, False
income, expenses = list(), list()

bot = telebot.TeleBot(config.TOKEN)


def choose_action(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    check_balance_button = types.KeyboardButton("üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    add_income_button = types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥—ã")
    add_expenses_button = types.KeyboardButton("‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã")

    markup.row(check_balance_button)
    markup.row(add_income_button)
    markup.row(add_expenses_button)

    bot.send_message(message.chat.id,
                     f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", parse_mode="markdown", reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    global user_id, username
    user_id = message.chat.id
    username = message.from_user.username
    database = db.Database()

    if database.is_registered(user_id):
        bot.send_message(message.chat.id,
                         f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, *{message.from_user.first_name} {message.from_user.last_name}*!", parse_mode="markdown")
        choose_action(message)

    else:
        markup = types.InlineKeyboardMarkup(row_width=1)
        signup_button = types.InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="signup")
        markup.add(signup_button)

        bot.send_message(message.chat.id,
                         "–≠—Ç–æ –±–æ—Ç *MCStudio*\n–° –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\nüí∞ –í–µ—Å—Ç–∏ —É—á—ë—Ç —Å–≤–æ–∏—Ö –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n"
                         "‚úî –ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–ª–∞–Ω—Å\n"
                         "‚ûï –î–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –¥–æ—Ö–æ–¥—ã\n"
                         "‚ûñ –î–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã\n"
                         "üì± –ò –≤—Å–µ —ç—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –≥–¥–µ —É–≥–æ–¥–Ω–æ!", parse_mode="markdown", reply_markup=markup)


@bot.message_handler(content_types=['text'])
def message_handler(message):
    global income_in, expenses_in, income, expenses
    database = db.Database()

    if income_in:
        try:
            n = float(message.text.replace(",", "."))
            if n:
                income.append(n)

            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç –Ω—É–ª—è")

        except ValueError:
            if message.text.lower().strip() == "end":
                income_in = False
                database.add_user_income(user_id, *income)
                bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!" if income else "–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã!")
                income = list()

            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞")

    elif expenses_in:
        try:
            n = float(message.text.replace(",", "."))
            if n:
                expenses.append(n)

            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç –Ω—É–ª—è")

        except ValueError:
            if message.text.lower().strip() == "end":
                expenses_in = False
                database.add_user_expenses(user_id, *expenses)
                bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!" if expenses else "–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã!")
                expenses = list()

            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞")

    elif message.chat.type == 'private':
        if message.text == 'üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å':
            balance = database.get_user_balance(user_id)
            bot.send_message(message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}")

        elif message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥—ã':
            bot.send_message(message.chat.id, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –∏—Ö –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ "
                                              "—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ *end*.",
                             parse_mode="markdown")
            income_in = True

        elif message.text == '‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã':
            bot.send_message(message.chat.id, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –∏—Ö –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ "
                                              "—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ *end*.",
                             parse_mode="markdown")
            expenses_in = True

        elif not any((income_in, expenses_in)):
            bot.send_message(message.chat.id, f"–¢–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    database = db.Database()
    try:
        if call.message:
            if call.data == "signup":
                database.create_user(user_id, username)
                bot.send_message(call.message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üëåüèª")

                choose_action(call.message)

    except Exception as e:
        print(repr(e))


bot.polling(none_stop=True)
